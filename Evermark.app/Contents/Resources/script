# encoding: UTF-8
VERSION='0.2'
puts "** Evermark v#{VERSION}\n\n"

#
# Checking for updates
#
puts "** Looking for updates"
begin
  require "net/https"
  uri  = URI.parse('https://raw.githubusercontent.com/regedor/Evermark/master/VERSION')
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  response = http.request(Net::HTTP::Get.new(uri.request_uri)).body.strip
  if response
    version, last_version = [VERSION, response].map { |v| v.split('.').map(&:to_i) }
    if (version <=> last_version) < 0
      puts "ATENTION: A new version of evermark is available!" 
      puts "You can find it here: https://github.com/regedor/Evermark"
    else
      puts "Looks like you are using the latest version."
    end
  end
rescue
end
puts 


#
# Loading gems (download if first time)
#
puts "** Loading dependencies\n\n"
require 'rubygems'
require 'stringio'

Gem.use_paths(nil, Gem.path << 'gems/')

def gem_available?(gemname)
  if Gem::Specification.methods.include?(:find_all_by_name) 
    Gem::Specification.find_all_by_name(gemname).any?
  else
    Gem.available?(gemname)
  end
end

#todo: delete rack gem if it was wrongly installed

unless gem_available?('rack') && gem_available?('redcarpet')
  puts "** Downloading Rubygems dependencies"
  puts "Note: Everythting will be kept inside the app not aftecting your system at all."
  puts "It means that by removing the app no rubish would stay on your computer.\n\n"
  %x{export GEM_HOME=$PWD/gems/ ; gem install bundler --no-ri --no-rdoc ; gems/gems/bundle*/bin/bundle }
  Gem.clear_paths
  Gem.use_paths(nil, Gem.path << 'gems/')
end

require 'rack'
require 'redcarpet'


#
# Making rack less verbose
#
$stderr = StringIO.new


#
# Class to interact with Evernote
#
class EvernoteText

  def changes? ; @changes end
  def last_modified ; @@last_modified end
  @@last_text = @@last_modified = ''


  def initialize

    @text = %x{ osascript 2>/dev/null <<APPLESCRIPT
      tell application "Evernote"
        if selection is not {} then
          set the_selection to selection
          return HTML content of item 1 of the_selection
        else
          return ""
        end if
      end tell
      APPLESCRIPT  }.force_encoding(Encoding::UTF_8)
    @text = @@last_text == '' ? "YOU SHOULD OPEN A NOTE ON EVERNOTE" : @@last_text if @text.nil? || @text == '' 


    @changes = @@last_text != @text

    if @changes
      @@last_text     = @text
      @@last_modified = Time.now.to_s.split(' ')[1] 
    end
  end


  def to_txt
    %x{echo '#{@text.gsub("'",'__APOSTROPHE__')}'|textutil -stdin -convert txt -stdout}.force_encoding(Encoding::UTF_8).gsub("\302\240", ' ').gsub('__APOSTROPHE__', "'")
  end


  def to_html
    Redcarpet::Markdown.new(Redcarpet::Render::HTML.new,:tables => true, :highlight => true, :fenced_code_blocks => true).render(self.to_txt) 
  end
end


#
# Rack middleware
#
app = Proc.new do |env|
  text = EvernoteText.new

  if text.changes?
    @body = ["<!DOCTYPE html>
      <html>
        <head>
          <meta charset='utf-8'> 
          <link rel='icon' href='data:;base64,iVBORw0KGgo='>
          <style>#{ File.read(File.expand_path('../markdown.css', __FILE__)) }</style>
          <style>#{ File.read(File.expand_path('../highlight.css', __FILE__)) }</style>
          <script type='text/JavaScript'>#{ File.read(File.expand_path('../all.js', __FILE__)).sub!('__LASTMODIFIED__', text.last_modified) }</script>
          <script type='text/JavaScript'>#{ File.read(File.expand_path('../highlight.pack.js', __FILE__)) }</script>
          <script>hljs.initHighlightingOnLoad();</script>
        </head>
        <body class'markdown-body'>#{text.to_html}</body>
      </html>
    "]
  end


  headers = { 'Content-Type'  => 'text/html', 'Last-Modified' => text.last_modified }
  body    = env["REQUEST_METHOD"] == "HEAD" ? [] : @body

  ['200', headers, body]
end

#
# Starting Server
#
puts "** Loading Evermark Server\n\n"
Thread.new do
  sleep 3
  puts "** Opening the Evermark page: http://localhost:3232/"
  puts "You can now minimize this window."
  puts "To stop Evermark Server press cancel and then quit. Enjoy =)\n\n"
  %x{ open "http://localhost:3232/" } 
end
Rack::Handler::WEBrick.run app, :Port => 3232
